// Pseudocode: Floyd-Warshall Algorithm

Input -> A weighted graph as an adjacency matrix
Output -> all pair shortest path/distance

- Create a distance_matrix "d" where d[i][j] = x where there is a direct
  edge from node "i" to node "j" and the cost is "x"

- for all node d[i][i] = 0
- for all node "i" and "j" where there isn't any direct edge from "i" to "j",
    - d[i][j] = Infinite


- for all node "k"
   - for all node "u"
	- for all node "v"
	   - d[u][v] = min( d[u][v], d[u][k] + d[k][v] )

- Output all pair shortest distance "d"


time complexity-> O(v^2) + O(v^3) = O(v3)
space complexity-> O(v^2)